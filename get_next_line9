/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   get_next_line.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: fratardi <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2018/12/26 00:53:32 by fratardi          #+#    #+#             */
/*   Updated: 2018/12/26 01:46:28 by fratardi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "get_next_line.h"

char *ft_strjoinfree(char *begtofree, char *end)
{
	char *rst;
	size_t 	j;
	size_t  i;

	rst = NULL;
	if(!begtofree && !end)
		return(rst);
	if(!begtofree && end)
		return(ft_strdup(end));
	if(begtofree && !end)
		return(begtofree);
	j = ft_strlen(begtofree);
	i = ft_strlen(end);
	ft_putendl("devant le malloc");
	if(!(rst = (char *)ft_memalloc(sizeof(char) * (i + j + 1))))
		return(NULL);
	rst = ft_strcpy(rst, begtofree);
	rst = ft_strcat (rst, end);
	free(begtofree);
	return(rst);
}

char 	*liner(char *content)
{
	char *ret;
	size_t  i;

	i = 0;
	ft_putendl("ca me surpendrait");
	while(content[i] && content[i] != '\n')
		i++;
	if(!(ret = ft_strndup(content , i)))
		return(NULL);
	return(ret);
}

char 	*buffrest(char *tofree)
{	
	char 	*retstring;
		
	retstring = NULL;	
	ft_putendl("chaeu;le===");
	if(ft_strchr(tofree , '\n') && ft_strchr(tofree, '\n') + 1)
		if(!(retstring = ft_strdup(ft_strchr(tofree, '\n') + 1)))
			return(NULL);
	free(tofree);
	return(retstring);
}


int		get_next_line(const int fd, char **line)
{
	static void		*rst = 0;
	int n;
	char buf[BUFF_SIZE + 1];

	ft_bzero(buf, BUFF_SIZE + 1);
	while(0 < (n = read(fd, buf, BUFF_SIZE)))
	{
		ft_strjoinfree(rst, buf);
		ft_putendl("ici");
		ft_bzero(buf, BUFF_SIZE + 1);
		ft_putendl("bonjour");
		ft_putendl(rst);
	}
	ft_putendl("la");
	if(ft_strchr(rst, '\n'))
	{
		*line = liner(rst);
		rst = buffrest(rst);
		return(1);
	}
	if(rst)
		*line = liner(rst);
	free(rst);
	rst = NULL;
	return(0);
}
